<script nonce="<%= locals.nonce %>">
    var users = {};
    var votes = {};
    var round = 0;
    var roundTimeout = false;
    var startGameTimeout = false;

    const socket = io({
        auth: {
            type: 1,
            user: "<%= locals.host %>",
            room: "<%= locals.room %>"
        }
    });

    socket.on("debate", async function(affirmative, negative){
        socket.emit("message", "debate!");
        socket.emit("message", "get ready...", [affirmative, negative]);
        
        document.getElementById("affirmative").innerText = users[affirmative]?.name;
        document.getElementById("negative").innerText = users[negative]?.name;
        
        if(roundTimeout) roundTimeout.pause();
        document.querySelector("debate").setAttribute("active", "1");

        await new Promise(function(resolve, reject){
            setTimeout(resolve, 2100);
        });

        await new Promise(function(resolve, reject){
            socket.emit("callback", affirmative, "ready", resolve);
        });
        document.getElementById("affirmative").setAttribute("speaking", "1");

        await new Promise(function(resolve, reject){
            setTimeout(resolve, 30000);
        });
        document.getElementById("affirmative").setAttribute("speaking", "0");

        await new Promise(function(resolve, reject){
            socket.emit("callback", negative, "ready", resolve);
        });
        document.getElementById("negative").setAttribute("speaking", "1");

        await new Promise(function(resolve, reject){
            setTimeout(resolve, 30000);
        });
        document.getElementById("negative").setAttribute("speaking", "0");

        socket.emit("message", "read", [affirmative, negative]);        
    });
    
    socket.on("owner", function(owner){
        var person = document.getElementById(owner);
        if(person) person.querySelector("name").innerText += " (host)";
    });

    socket.on("start", function(){
        document.getElementById("denominator").innerText = document.querySelectorAll("div.person").length;
        setActive("canvas");
        socket.emit("cutscene");
        startGameTimeout = new Timer(startRound, 10000);
    });

    socket.on("finished", function(n, d){
        document.getElementById("numerator").innerText = n;
        document.getElementById("denominator").innerText = d;
        if(n / d == 1) roundTimeout.now();
    });

    socket.on("skip", function(){
        if(document.getElementById("countdown").getAttribute("active") == "1") return;
        if(startGameTimeout) startGameTimeout.cancel();
        startRound();
    });

    socket.on("join", function(user){
        users[user.id] = user;

        var person = document.createElement("div");
        person.className = "person";
        person.id = user.id;
        person.style.background = ["#513021", "#874c2c", "#b66837", "#f9bf91", "#ecc19f"][+user.properties.skin];

        var name = document.createElement("name");
        name.innerText = user.name;
        person.append(name);

        document.querySelector("page#lobby div#people").append(person);
    });

    socket.on("update", function(user){
        users[user.id] = user;
        var person = document.getElementById(user.id);
        if(!person) return;

        person.style.background = ["#513021", "#874c2c", "#b66837", "#f9bf91", "#ecc19f"][+user.properties.skin];
    });

    socket.on("leave", function(uid){
        delete users[uid];
        var userElem = document.getElementById(uid);
        if(!userElem) return;

        userElem.remove();
    });

    socket.on("dc", () => window.location = "/");

    function startRound(){
        debates = {};
        socket.emit("startRound");
        document.getElementById("round").innerText = ++round;
        setActive("countdown");
        roundTimeout = new Timer(endRound, 62000);
    }

    function endRound(){
        socket.emit("cutscene");
        socket.emit("endRound", function(users){
            var table = document.getElementById("table");
            table.innerHTML = "";

            for(var user of Object.keys(users).sort((a, b) => users[a].votes < users[b].votes)){
                user = users[user];
                var row = document.createElement("p");
                row.innerText = `${user.name} | ${user.votes} votes | $${user.money}(+${user.made})`;
                table.appendChild(row);
            }

            setActive("leaderboard");
            document.getElementById("numerator").innerText = 0;
        });
    }

    function setActive(id){
        document.querySelectorAll("page").forEach((page) => page.setAttribute("active", "0"));
        document.getElementById(id).setAttribute("active", "1");
    }

    class Timer{
        constructor(cb, time){
            this.cb = cb;
            this.time = time;
            this.resume();
        }

        pause(){
            clearTimeout(this.timeOut);
            this.time -= Date.now() - this.original;
        }

        resume(){
            this.timeOut = setTimeout(this.cb, this.time);
            this.original = Date.now();
        }

        now(){
            this.cancel();
            this.cb();
        }

        cancel(){
            clearTimeout(this.timeOut);
        }
    }
</script>